trigger:
- master
- feature/*

stages:
- stage: Build
  jobs:
  - job: Build

    pool:
      vmImage: 'windows-latest'

    variables:
      solution: '**/*.sln'
      buildProjects: '**/*.csproj'
      testProjects: '**/*.Tests.csproj'
      buildConfiguration: 'Release'

    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.0.x'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '7.0.x'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        verbosityRestore: 'Normal'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(buildProjects)'
        arguments: '-c $(buildConfiguration) --verbosity normal --no-incremental --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '$(testProjects)'
        arguments: '--no-build -c $(buildConfiguration) --collect:"XPlat Code Coverage" --filter TestCategory!=Integration'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)\**\coverage.cobertura.xml'

    - task: CopyFiles@2
      displayName: 'Copy to Artifact Staging'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**\bin\$(buildConfiguration)\**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  jobs:
  - deployment: NuGet_org
    pool:
      vmImage: 'windows-latest'
    environment: 'NuGet_org'
    condition: eq(variables['build.sourceBranchName'], 'master')
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet.org'
